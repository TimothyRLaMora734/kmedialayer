// WARNING: File autogenerated DO NOT modify
// https://www.khronos.org/registry/OpenGL/api/GLES2/gl2.h
@file:Suppress("unused", "RedundantUnitReturnType")

package com.soywiz.kmedialayer

import org.w3c.dom.*
import org.khronos.webgl.*

class KmlGlJsCanvas(val canvas: HTMLCanvasElement) : KmlGl() {
    val gl = canvas.getContext("webgl") as WebGLRenderingContext
    private val items = arrayOfNulls<Any>(8 * 1024)
    private val freeList = (1 until items.size).reversed().toMutableList()
    private fun <T> T.alloc(): Int = run { val index = freeList.removeAt(freeList.size - 1); items[index] = this; index }
    private fun <T> Int.get(): T = items[this] as T
    private fun <T> Int.free(): T = run { val out = items[this] as T; freeList += this; items[this] = null; out }

    override fun activeTexture(texture: Int): Unit = gl.activeTexture(texture.get())
    override fun attachShader(program: Int, shader: Int): Unit = gl.attachShader(program.get(), shader.get())
    override fun bindAttribLocation(program: Int, index: Int, name: String): Unit = gl.bindAttribLocation(program.get(), index, name)
    override fun bindBuffer(target: Int, buffer: Int): Unit = gl.bindBuffer(target, buffer.get())
    override fun bindFramebuffer(target: Int, framebuffer: Int): Unit = gl.bindFramebuffer(target, framebuffer.get())
    override fun bindRenderbuffer(target: Int, renderbuffer: Int): Unit = gl.bindRenderbuffer(target, renderbuffer.get())
    override fun bindTexture(target: Int, texture: Int): Unit = gl.bindTexture(target, texture.get())
    override fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = gl.blendColor(red, green, blue, alpha)
    override fun blendEquation(mode: Int): Unit = gl.blendEquation(mode)
    override fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit = gl.blendEquationSeparate(modeRGB, modeAlpha)
    override fun blendFunc(sfactor: Int, dfactor: Int): Unit = gl.blendFunc(sfactor, dfactor)
    override fun blendFuncSeparate(sfactorRGB: Int, dfactorRGB: Int, sfactorAlpha: Int, dfactorAlpha: Int): Unit = gl.blendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
    override fun bufferData(target: Int, size: Int, data: KmlBuffer, usage: Int): Unit = gl.bufferData(target, data.arrayBuffer, usage)
    override fun bufferSubData(target: Int, offset: Int, size: Int, data: KmlBuffer): Unit = gl.bufferSubData(target, offset, data.arrayBuffer)
    override fun checkFramebufferStatus(target: Int): Int = gl.checkFramebufferStatus(target)
    override fun clear(mask: Int): Unit = gl.clear(mask)
    override fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = gl.clearColor(red, green, blue, alpha)
    override fun clearDepthf(d: Float): Unit = gl.clearDepth(d)
    override fun clearStencil(s: Int): Unit = gl.clearStencil(s)
    override fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit = gl.colorMask(red, green, blue, alpha)
    override fun compileShader(shader: Int): Unit = gl.compileShader(shader.get())
    override fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, imageSize: Int, data: KmlBuffer): Unit = gl.compressedTexImage2D(target, level, internalformat, width, height, border, data.arrayByte)
    override fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, imageSize: Int, data: KmlBuffer): Unit = gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data.arrayByte)
    override fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit = gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border)
    override fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    override fun createProgram(): Int = gl.createProgram().alloc()
    override fun createShader(type: Int): Int = gl.createShader(type).alloc()
    override fun cullFace(mode: Int): Unit = gl.cullFace(mode)
    override fun deleteBuffers(n: Int, items: KmlBuffer): Unit = run { for (p in 0 until n) gl.deleteBuffer(items.arrayInt[p].free()) }
    override fun deleteFramebuffers(n: Int, items: KmlBuffer): Unit = run { for (p in 0 until n) gl.deleteFramebuffer(items.arrayInt[p].free()) }
    override fun deleteProgram(program: Int): Unit = gl.deleteProgram(program.get())
    override fun deleteRenderbuffers(n: Int, items: KmlBuffer): Unit = run { for (p in 0 until n) gl.deleteRenderbuffer(items.arrayInt[p].free()) }
    override fun deleteShader(shader: Int): Unit = gl.deleteShader(shader.get())
    override fun deleteTextures(n: Int, items: KmlBuffer): Unit = run { for (p in 0 until n) gl.deleteTexture(items.arrayInt[p].free()) }
    override fun depthFunc(func: Int): Unit = gl.depthFunc(func)
    override fun depthMask(flag: Boolean): Unit = gl.depthMask(flag)
    override fun depthRangef(n: Float, f: Float): Unit = gl.depthRange(n, f)
    override fun detachShader(program: Int, shader: Int): Unit = gl.detachShader(program.get(), shader.get())
    override fun disable(cap: Int): Unit = gl.disable(cap)
    override fun disableVertexAttribArray(index: Int): Unit = gl.disableVertexAttribArray(index)
    override fun drawArrays(mode: Int, first: Int, count: Int): Unit = gl.drawArrays(mode, first, count)
    override fun drawElements(mode: Int, count: Int, type: Int, indices: Int): Unit = gl.drawElements(mode, count, type, indices)
    override fun enable(cap: Int): Unit = gl.enable(cap)
    override fun enableVertexAttribArray(index: Int): Unit = gl.enableVertexAttribArray(index)
    override fun finish(): Unit = gl.finish()
    override fun flush(): Unit = gl.flush()
    override fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: Int): Unit = gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer.get())
    override fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: Int, level: Int): Unit = gl.framebufferTexture2D(target, attachment, textarget, texture.get(), level)
    override fun frontFace(mode: Int): Unit = gl.frontFace(mode)
    override fun genBuffers(n: Int, buffers: KmlBuffer): Unit = run { for (p in 0 until n) buffers.arrayInt[p] = gl.createBuffer().alloc() }
    override fun generateMipmap(target: Int): Unit = gl.generateMipmap(target)
    override fun genFramebuffers(n: Int, framebuffers: KmlBuffer): Unit = run { for (p in 0 until n) framebuffers.arrayInt[p] = gl.createFramebuffer().alloc() }
    override fun genRenderbuffers(n: Int, renderbuffers: KmlBuffer): Unit = run { for (p in 0 until n) renderbuffers.arrayInt[p] = gl.createRenderbuffer().alloc() }
    override fun genTextures(n: Int, textures: KmlBuffer): Unit = run { for (p in 0 until n) textures.arrayInt[p] = gl.createTexture().alloc() }
    override fun getActiveAttrib(program: Int, index: Int, bufSize: Int, length: KmlBuffer, size: KmlBuffer, type: KmlBuffer, name: KmlBuffer): Unit = gl.getActiveAttrib(program.get(), index, bufSize, length, size, type, name)
    override fun getActiveUniform(program: Int, index: Int, bufSize: Int, length: KmlBuffer, size: KmlBuffer, type: KmlBuffer, name: KmlBuffer): Unit = gl.getActiveUniform(program.get(), index, bufSize, length, size, type, name)
    override fun getAttachedShaders(program: Int, maxCount: Int, count: KmlBuffer, shaders: KmlBuffer): Unit = gl.getAttachedShaders(program.get(), maxCount, count, shaders)
    override fun getAttribLocation(program: Int, name: String): Int = gl.getAttribLocation(program.get(), name)
    override fun getBooleanv(pname: Int, data: KmlBuffer): Unit = gl.getBooleanv(pname, data)
    override fun getBufferParameteriv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.getBufferParameteriv(target, pname, params)
    override fun getError(): Int = gl.getError()
    override fun getFloatv(pname: Int, data: KmlBuffer): Unit = gl.getFloatv(pname, data)
    override fun getFramebufferAttachmentParameteriv(target: Int, attachment: Int, pname: Int, params: KmlBuffer): Unit = gl.getFramebufferAttachmentParameteriv(target, attachment, pname, params)
    override fun getIntegerv(pname: Int, data: KmlBuffer): Unit = gl.getIntegerv(pname, data)
    override fun getProgramiv(program: Int, pname: Int, params: KmlBuffer): Unit = gl.getProgramiv(program.get(), pname, params)
    override fun getProgramInfoLog(program: Int, bufSize: Int, length: KmlBuffer, infoLog: KmlBuffer): Unit = gl.getProgramInfoLog(program.get(), bufSize, length, infoLog)
    override fun getRenderbufferParameteriv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.getRenderbufferParameteriv(target, pname, params)
    override fun getShaderiv(shader: Int, pname: Int, params: KmlBuffer): Unit = gl.getShaderiv(shader.get(), pname, params)
    override fun getShaderInfoLog(shader: Int, bufSize: Int, length: KmlBuffer, infoLog: KmlBuffer): Unit = gl.getShaderInfoLog(shader.get(), bufSize, length, infoLog)
    override fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int, range: KmlBuffer, precision: KmlBuffer): Unit = gl.getShaderPrecisionFormat(shadertype, precisiontype, range, precision)
    override fun getShaderSource(shader: Int, bufSize: Int, length: KmlBuffer, source: KmlBuffer): Unit = gl.getShaderSource(shader.get(), bufSize, length, source)
    override fun getString(name: Int): String = gl.getParameter() as String
    override fun getTexParameterfv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.getTexParameterfv(target, pname, params)
    override fun getTexParameteriv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.getTexParameteriv(target, pname, params)
    override fun getUniformfv(program: Int, location: Int, params: KmlBuffer): Unit = gl.getUniformfv(program.get(), location.get(), params)
    override fun getUniformiv(program: Int, location: Int, params: KmlBuffer): Unit = gl.getUniformiv(program.get(), location.get(), params)
    override fun getUniformLocation(program: Int, name: String): Int = gl.getUniformLocation(program.get(), name).alloc()
    override fun getVertexAttribfv(index: Int, pname: Int, params: KmlBuffer): Unit = gl.getVertexAttribfv(index, pname, params)
    override fun getVertexAttribiv(index: Int, pname: Int, params: KmlBuffer): Unit = gl.getVertexAttribiv(index, pname, params)
    override fun getVertexAttribPointerv(index: Int, pname: Int, pointer: KmlBuffer): Unit = gl.getVertexAttribPointerv(index, pname, pointer)
    override fun hint(target: Int, mode: Int): Unit = gl.hint(target, mode)
    override fun isBuffer(buffer: Int): Boolean = gl.isBuffer(buffer.get())
    override fun isEnabled(cap: Int): Boolean = gl.isEnabled(cap)
    override fun isFramebuffer(framebuffer: Int): Boolean = gl.isFramebuffer(framebuffer.get())
    override fun isProgram(program: Int): Boolean = gl.isProgram(program.get())
    override fun isRenderbuffer(renderbuffer: Int): Boolean = gl.isRenderbuffer(renderbuffer.get())
    override fun isShader(shader: Int): Boolean = gl.isShader(shader.get())
    override fun isTexture(texture: Int): Boolean = gl.isTexture(texture.get())
    override fun lineWidth(width: Float): Unit = gl.lineWidth(width)
    override fun linkProgram(program: Int): Unit = gl.linkProgram(program.get())
    override fun pixelStorei(pname: Int, param: Int): Unit = gl.pixelStorei(pname, param)
    override fun polygonOffset(factor: Float, units: Float): Unit = gl.polygonOffset(factor, units)
    override fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: KmlBuffer): Unit = gl.readPixels(x, y, width, height, format, type, pixels)
    override fun releaseShaderCompiler(): Unit = Unit
    override fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit = gl.renderbufferStorage(target, internalformat, width, height)
    override fun sampleCoverage(value: Float, invert: Boolean): Unit = gl.sampleCoverage(value, invert)
    override fun scissor(x: Int, y: Int, width: Int, height: Int): Unit = gl.scissor(x, y, width, height)
    override fun shaderBinary(count: Int, shaders: KmlBuffer, binaryformat: Int, binary: KmlBuffer, length: Int): Unit = gl.shaderBinary(count, shaders, binaryformat, binary, length)
    override fun shaderSource(shader: Int, string: String): Unit = gl.shaderSource(shader.get(), string)
    override fun stencilFunc(func: Int, ref: Int, mask: Int): Unit = gl.stencilFunc(func, ref, mask)
    override fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit = gl.stencilFuncSeparate(face, func, ref, mask)
    override fun stencilMask(mask: Int): Unit = gl.stencilMask(mask)
    override fun stencilMaskSeparate(face: Int, mask: Int): Unit = gl.stencilMaskSeparate(face, mask)
    override fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit = gl.stencilOp(fail, zfail, zpass)
    override fun stencilOpSeparate(face: Int, sfail: Int, dpfail: Int, dppass: Int): Unit = gl.stencilOpSeparate(face, sfail, dpfail, dppass)
    override fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: KmlBuffer): Unit = gl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels)
    override fun texParameterf(target: Int, pname: Int, param: Float): Unit = gl.texParameterf(target, pname, param)
    override fun texParameterfv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.texParameterfv(target, pname, params)
    override fun texParameteri(target: Int, pname: Int, param: Int): Unit = gl.texParameteri(target, pname, param)
    override fun texParameteriv(target: Int, pname: Int, params: KmlBuffer): Unit = gl.texParameteriv(target, pname, params)
    override fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: KmlBuffer): Unit = gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels)
    override fun uniform1f(location: Int, v0: Float): Unit = gl.uniform1f(location.get(), v0)
    override fun uniform1fv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform1fv(location.get(), value.arrayFloat)
    override fun uniform1i(location: Int, v0: Int): Unit = gl.uniform1i(location.get(), v0)
    override fun uniform1iv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform1iv(location.get(), value.arrayInt)
    override fun uniform2f(location: Int, v0: Float, v1: Float): Unit = gl.uniform2f(location.get(), v0, v1)
    override fun uniform2fv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform2fv(location.get(), value.arrayFloat)
    override fun uniform2i(location: Int, v0: Int, v1: Int): Unit = gl.uniform2i(location.get(), v0, v1)
    override fun uniform2iv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform2iv(location.get(), value.arrayInt)
    override fun uniform3f(location: Int, v0: Float, v1: Float, v2: Float): Unit = gl.uniform3f(location.get(), v0, v1, v2)
    override fun uniform3fv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform3fv(location.get(), value.arrayFloat)
    override fun uniform3i(location: Int, v0: Int, v1: Int, v2: Int): Unit = gl.uniform3i(location.get(), v0, v1, v2)
    override fun uniform3iv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform3iv(location.get(), value.arrayInt)
    override fun uniform4f(location: Int, v0: Float, v1: Float, v2: Float, v3: Float): Unit = gl.uniform4f(location.get(), v0, v1, v2, v3)
    override fun uniform4fv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform4fv(location.get(), value.arrayFloat)
    override fun uniform4i(location: Int, v0: Int, v1: Int, v2: Int, v3: Int): Unit = gl.uniform4i(location.get(), v0, v1, v2, v3)
    override fun uniform4iv(location: Int, count: Int, value: KmlBuffer): Unit = gl.uniform4iv(location.get(), value.arrayInt)
    override fun uniformMatrix2fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer): Unit = gl.uniformMatrix2fv(location.get(), count, transpose, value)
    override fun uniformMatrix3fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer): Unit = gl.uniformMatrix3fv(location.get(), count, transpose, value)
    override fun uniformMatrix4fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer): Unit = gl.uniformMatrix4fv(location.get(), count, transpose, value)
    override fun useProgram(program: Int): Unit = gl.useProgram(program.get())
    override fun validateProgram(program: Int): Unit = gl.validateProgram(program.get())
    override fun vertexAttrib1f(index: Int, x: Float): Unit = gl.vertexAttrib1f(index, x)
    override fun vertexAttrib1fv(index: Int, v: KmlBuffer): Unit = gl.vertexAttrib1fv(index, v)
    override fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit = gl.vertexAttrib2f(index, x, y)
    override fun vertexAttrib2fv(index: Int, v: KmlBuffer): Unit = gl.vertexAttrib2fv(index, v)
    override fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit = gl.vertexAttrib3f(index, x, y, z)
    override fun vertexAttrib3fv(index: Int, v: KmlBuffer): Unit = gl.vertexAttrib3fv(index, v)
    override fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit = gl.vertexAttrib4f(index, x, y, z, w)
    override fun vertexAttrib4fv(index: Int, v: KmlBuffer): Unit = gl.vertexAttrib4fv(index, v)
    override fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, pointer: Int): Unit = gl.vertexAttribPointer(index, size, type, normalized, stride, pointer)
    override fun viewport(x: Int, y: Int, width: Int, height: Int): Unit = gl.viewport(x, y, width, height)
}
