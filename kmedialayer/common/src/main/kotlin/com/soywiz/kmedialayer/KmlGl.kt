// WARNING: File autogenerated DO NOT modify
// https://www.khronos.org/registry/OpenGL/api/GLES2/gl2.h
@file:Suppress("unused", "RedundantUnitReturnType")

package com.soywiz.kmedialayer

const val GL_DEPTH_BUFFER_BIT: Int = 0x0100
const val GL_STENCIL_BUFFER_BIT: Int = 0x0400
const val GL_COLOR_BUFFER_BIT: Int = 0x4000
const val GL_FALSE: Int = 0x0000
const val GL_TRUE: Int = 0x0001
const val GL_POINTS: Int = 0x0000
const val GL_LINES: Int = 0x0001
const val GL_LINE_LOOP: Int = 0x0002
const val GL_LINE_STRIP: Int = 0x0003
const val GL_TRIANGLES: Int = 0x0004
const val GL_TRIANGLE_STRIP: Int = 0x0005
const val GL_TRIANGLE_FAN: Int = 0x0006
const val GL_ZERO: Int = 0x0000
const val GL_ONE: Int = 0x0001
const val GL_SRC_COLOR: Int = 0x0300
const val GL_ONE_MINUS_SRC_COLOR: Int = 0x0301
const val GL_SRC_ALPHA: Int = 0x0302
const val GL_ONE_MINUS_SRC_ALPHA: Int = 0x0303
const val GL_DST_ALPHA: Int = 0x0304
const val GL_ONE_MINUS_DST_ALPHA: Int = 0x0305
const val GL_DST_COLOR: Int = 0x0306
const val GL_ONE_MINUS_DST_COLOR: Int = 0x0307
const val GL_SRC_ALPHA_SATURATE: Int = 0x0308
const val GL_FUNC_ADD: Int = 0x8006
const val GL_BLEND_EQUATION: Int = 0x8009
const val GL_BLEND_EQUATION_RGB: Int = 0x8009
const val GL_BLEND_EQUATION_ALPHA: Int = 0x883D
const val GL_FUNC_SUBTRACT: Int = 0x800A
const val GL_FUNC_REVERSE_SUBTRACT: Int = 0x800B
const val GL_BLEND_DST_RGB: Int = 0x80C8
const val GL_BLEND_SRC_RGB: Int = 0x80C9
const val GL_BLEND_DST_ALPHA: Int = 0x80CA
const val GL_BLEND_SRC_ALPHA: Int = 0x80CB
const val GL_CONSTANT_COLOR: Int = 0x8001
const val GL_ONE_MINUS_CONSTANT_COLOR: Int = 0x8002
const val GL_CONSTANT_ALPHA: Int = 0x8003
const val GL_ONE_MINUS_CONSTANT_ALPHA: Int = 0x8004
const val GL_BLEND_COLOR: Int = 0x8005
const val GL_ARRAY_BUFFER: Int = 0x8892
const val GL_ELEMENT_ARRAY_BUFFER: Int = 0x8893
const val GL_ARRAY_BUFFER_BINDING: Int = 0x8894
const val GL_ELEMENT_ARRAY_BUFFER_BINDING: Int = 0x8895
const val GL_STREAM_DRAW: Int = 0x88E0
const val GL_STATIC_DRAW: Int = 0x88E4
const val GL_DYNAMIC_DRAW: Int = 0x88E8
const val GL_BUFFER_SIZE: Int = 0x8764
const val GL_BUFFER_USAGE: Int = 0x8765
const val GL_CURRENT_VERTEX_ATTRIB: Int = 0x8626
const val GL_FRONT: Int = 0x0404
const val GL_BACK: Int = 0x0405
const val GL_FRONT_AND_BACK: Int = 0x0408
const val GL_TEXTURE_2D: Int = 0x0DE1
const val GL_CULL_FACE: Int = 0x0B44
const val GL_BLEND: Int = 0x0BE2
const val GL_DITHER: Int = 0x0BD0
const val GL_STENCIL_TEST: Int = 0x0B90
const val GL_DEPTH_TEST: Int = 0x0B71
const val GL_SCISSOR_TEST: Int = 0x0C11
const val GL_POLYGON_OFFSET_FILL: Int = 0x8037
const val GL_SAMPLE_ALPHA_TO_COVERAGE: Int = 0x809E
const val GL_SAMPLE_COVERAGE: Int = 0x80A0
const val GL_NO_ERROR: Int = 0x0000
const val GL_INVALID_ENUM: Int = 0x0500
const val GL_INVALID_VALUE: Int = 0x0501
const val GL_INVALID_OPERATION: Int = 0x0502
const val GL_OUT_OF_MEMORY: Int = 0x0505
const val GL_CW: Int = 0x0900
const val GL_CCW: Int = 0x0901
const val GL_LINE_WIDTH: Int = 0x0B21
const val GL_ALIASED_POINT_SIZE_RANGE: Int = 0x846D
const val GL_ALIASED_LINE_WIDTH_RANGE: Int = 0x846E
const val GL_CULL_FACE_MODE: Int = 0x0B45
const val GL_FRONT_FACE: Int = 0x0B46
const val GL_DEPTH_RANGE: Int = 0x0B70
const val GL_DEPTH_WRITEMASK: Int = 0x0B72
const val GL_DEPTH_CLEAR_VALUE: Int = 0x0B73
const val GL_DEPTH_FUNC: Int = 0x0B74
const val GL_STENCIL_CLEAR_VALUE: Int = 0x0B91
const val GL_STENCIL_FUNC: Int = 0x0B92
const val GL_STENCIL_FAIL: Int = 0x0B94
const val GL_STENCIL_PASS_DEPTH_FAIL: Int = 0x0B95
const val GL_STENCIL_PASS_DEPTH_PASS: Int = 0x0B96
const val GL_STENCIL_REF: Int = 0x0B97
const val GL_STENCIL_VALUE_MASK: Int = 0x0B93
const val GL_STENCIL_WRITEMASK: Int = 0x0B98
const val GL_STENCIL_BACK_FUNC: Int = 0x8800
const val GL_STENCIL_BACK_FAIL: Int = 0x8801
const val GL_STENCIL_BACK_PASS_DEPTH_FAIL: Int = 0x8802
const val GL_STENCIL_BACK_PASS_DEPTH_PASS: Int = 0x8803
const val GL_STENCIL_BACK_REF: Int = 0x8CA3
const val GL_STENCIL_BACK_VALUE_MASK: Int = 0x8CA4
const val GL_STENCIL_BACK_WRITEMASK: Int = 0x8CA5
const val GL_VIEWPORT: Int = 0x0BA2
const val GL_SCISSOR_BOX: Int = 0x0C10
const val GL_COLOR_CLEAR_VALUE: Int = 0x0C22
const val GL_COLOR_WRITEMASK: Int = 0x0C23
const val GL_UNPACK_ALIGNMENT: Int = 0x0CF5
const val GL_PACK_ALIGNMENT: Int = 0x0D05
const val GL_MAX_TEXTURE_SIZE: Int = 0x0D33
const val GL_MAX_VIEWPORT_DIMS: Int = 0x0D3A
const val GL_SUBPIXEL_BITS: Int = 0x0D50
const val GL_RED_BITS: Int = 0x0D52
const val GL_GREEN_BITS: Int = 0x0D53
const val GL_BLUE_BITS: Int = 0x0D54
const val GL_ALPHA_BITS: Int = 0x0D55
const val GL_DEPTH_BITS: Int = 0x0D56
const val GL_STENCIL_BITS: Int = 0x0D57
const val GL_POLYGON_OFFSET_UNITS: Int = 0x2A00
const val GL_POLYGON_OFFSET_FACTOR: Int = 0x8038
const val GL_TEXTURE_BINDING_2D: Int = 0x8069
const val GL_SAMPLE_BUFFERS: Int = 0x80A8
const val GL_SAMPLES: Int = 0x80A9
const val GL_SAMPLE_COVERAGE_VALUE: Int = 0x80AA
const val GL_SAMPLE_COVERAGE_INVERT: Int = 0x80AB
const val GL_NUM_COMPRESSED_TEXTURE_FORMATS: Int = 0x86A2
const val GL_COMPRESSED_TEXTURE_FORMATS: Int = 0x86A3
const val GL_DONT_CARE: Int = 0x1100
const val GL_FASTEST: Int = 0x1101
const val GL_NICEST: Int = 0x1102
const val GL_GENERATE_MIPMAP_HINT: Int = 0x8192
const val GL_BYTE: Int = 0x1400
const val GL_UNSIGNED_BYTE: Int = 0x1401
const val GL_SHORT: Int = 0x1402
const val GL_UNSIGNED_SHORT: Int = 0x1403
const val GL_INT: Int = 0x1404
const val GL_UNSIGNED_INT: Int = 0x1405
const val GL_FLOAT: Int = 0x1406
const val GL_FIXED: Int = 0x140C
const val GL_DEPTH_COMPONENT: Int = 0x1902
const val GL_ALPHA: Int = 0x1906
const val GL_RGB: Int = 0x1907
const val GL_RGBA: Int = 0x1908
const val GL_LUMINANCE: Int = 0x1909
const val GL_LUMINANCE_ALPHA: Int = 0x190A
const val GL_UNSIGNED_SHORT_4_4_4_4: Int = 0x8033
const val GL_UNSIGNED_SHORT_5_5_5_1: Int = 0x8034
const val GL_UNSIGNED_SHORT_5_6_5: Int = 0x8363
const val GL_FRAGMENT_SHADER: Int = 0x8B30
const val GL_VERTEX_SHADER: Int = 0x8B31
const val GL_MAX_VERTEX_ATTRIBS: Int = 0x8869
const val GL_MAX_VERTEX_UNIFORM_VECTORS: Int = 0x8DFB
const val GL_MAX_VARYING_VECTORS: Int = 0x8DFC
const val GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int = 0x8B4D
const val GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int = 0x8B4C
const val GL_MAX_TEXTURE_IMAGE_UNITS: Int = 0x8872
const val GL_MAX_FRAGMENT_UNIFORM_VECTORS: Int = 0x8DFD
const val GL_SHADER_TYPE: Int = 0x8B4F
const val GL_DELETE_STATUS: Int = 0x8B80
const val GL_LINK_STATUS: Int = 0x8B82
const val GL_VALIDATE_STATUS: Int = 0x8B83
const val GL_ATTACHED_SHADERS: Int = 0x8B85
const val GL_ACTIVE_UNIFORMS: Int = 0x8B86
const val GL_ACTIVE_UNIFORM_MAX_LENGTH: Int = 0x8B87
const val GL_ACTIVE_ATTRIBUTES: Int = 0x8B89
const val GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: Int = 0x8B8A
const val GL_SHADING_LANGUAGE_VERSION: Int = 0x8B8C
const val GL_CURRENT_PROGRAM: Int = 0x8B8D
const val GL_NEVER: Int = 0x0200
const val GL_LESS: Int = 0x0201
const val GL_EQUAL: Int = 0x0202
const val GL_LEQUAL: Int = 0x0203
const val GL_GREATER: Int = 0x0204
const val GL_NOTEQUAL: Int = 0x0205
const val GL_GEQUAL: Int = 0x0206
const val GL_ALWAYS: Int = 0x0207
const val GL_KEEP: Int = 0x1E00
const val GL_REPLACE: Int = 0x1E01
const val GL_INCR: Int = 0x1E02
const val GL_DECR: Int = 0x1E03
const val GL_INVERT: Int = 0x150A
const val GL_INCR_WRAP: Int = 0x8507
const val GL_DECR_WRAP: Int = 0x8508
const val GL_VENDOR: Int = 0x1F00
const val GL_RENDERER: Int = 0x1F01
const val GL_VERSION: Int = 0x1F02
const val GL_EXTENSIONS: Int = 0x1F03
const val GL_NEAREST: Int = 0x2600
const val GL_LINEAR: Int = 0x2601
const val GL_NEAREST_MIPMAP_NEAREST: Int = 0x2700
const val GL_LINEAR_MIPMAP_NEAREST: Int = 0x2701
const val GL_NEAREST_MIPMAP_LINEAR: Int = 0x2702
const val GL_LINEAR_MIPMAP_LINEAR: Int = 0x2703
const val GL_TEXTURE_MAG_FILTER: Int = 0x2800
const val GL_TEXTURE_MIN_FILTER: Int = 0x2801
const val GL_TEXTURE_WRAP_S: Int = 0x2802
const val GL_TEXTURE_WRAP_T: Int = 0x2803
const val GL_TEXTURE: Int = 0x1702
const val GL_TEXTURE_CUBE_MAP: Int = 0x8513
const val GL_TEXTURE_BINDING_CUBE_MAP: Int = 0x8514
const val GL_TEXTURE_CUBE_MAP_POSITIVE_X: Int = 0x8515
const val GL_TEXTURE_CUBE_MAP_NEGATIVE_X: Int = 0x8516
const val GL_TEXTURE_CUBE_MAP_POSITIVE_Y: Int = 0x8517
const val GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: Int = 0x8518
const val GL_TEXTURE_CUBE_MAP_POSITIVE_Z: Int = 0x8519
const val GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: Int = 0x851A
const val GL_MAX_CUBE_MAP_TEXTURE_SIZE: Int = 0x851C
const val GL_TEXTURE0: Int = 0x84C0
const val GL_TEXTURE1: Int = 0x84C1
const val GL_TEXTURE2: Int = 0x84C2
const val GL_TEXTURE3: Int = 0x84C3
const val GL_TEXTURE4: Int = 0x84C4
const val GL_TEXTURE5: Int = 0x84C5
const val GL_TEXTURE6: Int = 0x84C6
const val GL_TEXTURE7: Int = 0x84C7
const val GL_TEXTURE8: Int = 0x84C8
const val GL_TEXTURE9: Int = 0x84C9
const val GL_TEXTURE10: Int = 0x84CA
const val GL_TEXTURE11: Int = 0x84CB
const val GL_TEXTURE12: Int = 0x84CC
const val GL_TEXTURE13: Int = 0x84CD
const val GL_TEXTURE14: Int = 0x84CE
const val GL_TEXTURE15: Int = 0x84CF
const val GL_TEXTURE16: Int = 0x84D0
const val GL_TEXTURE17: Int = 0x84D1
const val GL_TEXTURE18: Int = 0x84D2
const val GL_TEXTURE19: Int = 0x84D3
const val GL_TEXTURE20: Int = 0x84D4
const val GL_TEXTURE21: Int = 0x84D5
const val GL_TEXTURE22: Int = 0x84D6
const val GL_TEXTURE23: Int = 0x84D7
const val GL_TEXTURE24: Int = 0x84D8
const val GL_TEXTURE25: Int = 0x84D9
const val GL_TEXTURE26: Int = 0x84DA
const val GL_TEXTURE27: Int = 0x84DB
const val GL_TEXTURE28: Int = 0x84DC
const val GL_TEXTURE29: Int = 0x84DD
const val GL_TEXTURE30: Int = 0x84DE
const val GL_TEXTURE31: Int = 0x84DF
const val GL_ACTIVE_TEXTURE: Int = 0x84E0
const val GL_REPEAT: Int = 0x2901
const val GL_CLAMP_TO_EDGE: Int = 0x812F
const val GL_MIRRORED_REPEAT: Int = 0x8370
const val GL_FLOAT_VEC2: Int = 0x8B50
const val GL_FLOAT_VEC3: Int = 0x8B51
const val GL_FLOAT_VEC4: Int = 0x8B52
const val GL_INT_VEC2: Int = 0x8B53
const val GL_INT_VEC3: Int = 0x8B54
const val GL_INT_VEC4: Int = 0x8B55
const val GL_BOOL: Int = 0x8B56
const val GL_BOOL_VEC2: Int = 0x8B57
const val GL_BOOL_VEC3: Int = 0x8B58
const val GL_BOOL_VEC4: Int = 0x8B59
const val GL_FLOAT_MAT2: Int = 0x8B5A
const val GL_FLOAT_MAT3: Int = 0x8B5B
const val GL_FLOAT_MAT4: Int = 0x8B5C
const val GL_SAMPLER_2D: Int = 0x8B5E
const val GL_SAMPLER_CUBE: Int = 0x8B60
const val GL_VERTEX_ATTRIB_ARRAY_ENABLED: Int = 0x8622
const val GL_VERTEX_ATTRIB_ARRAY_SIZE: Int = 0x8623
const val GL_VERTEX_ATTRIB_ARRAY_STRIDE: Int = 0x8624
const val GL_VERTEX_ATTRIB_ARRAY_TYPE: Int = 0x8625
const val GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: Int = 0x886A
const val GL_VERTEX_ATTRIB_ARRAY_POINTER: Int = 0x8645
const val GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int = 0x889F
const val GL_IMPLEMENTATION_COLOR_READ_TYPE: Int = 0x8B9A
const val GL_IMPLEMENTATION_COLOR_READ_FORMAT: Int = 0x8B9B
const val GL_COMPILE_STATUS: Int = 0x8B81
const val GL_INFO_LOG_LENGTH: Int = 0x8B84
const val GL_SHADER_SOURCE_LENGTH: Int = 0x8B88
const val GL_SHADER_COMPILER: Int = 0x8DFA
const val GL_SHADER_BINARY_FORMATS: Int = 0x8DF8
const val GL_NUM_SHADER_BINARY_FORMATS: Int = 0x8DF9
const val GL_LOW_FLOAT: Int = 0x8DF0
const val GL_MEDIUM_FLOAT: Int = 0x8DF1
const val GL_HIGH_FLOAT: Int = 0x8DF2
const val GL_LOW_INT: Int = 0x8DF3
const val GL_MEDIUM_INT: Int = 0x8DF4
const val GL_HIGH_INT: Int = 0x8DF5
const val GL_FRAMEBUFFER: Int = 0x8D40
const val GL_RENDERBUFFER: Int = 0x8D41
const val GL_RGBA4: Int = 0x8056
const val GL_RGB5_A1: Int = 0x8057
const val GL_RGB565: Int = 0x8D62
const val GL_DEPTH_COMPONENT16: Int = 0x81A5
const val GL_STENCIL_INDEX8: Int = 0x8D48
const val GL_RENDERBUFFER_WIDTH: Int = 0x8D42
const val GL_RENDERBUFFER_HEIGHT: Int = 0x8D43
const val GL_RENDERBUFFER_INTERNAL_FORMAT: Int = 0x8D44
const val GL_RENDERBUFFER_RED_SIZE: Int = 0x8D50
const val GL_RENDERBUFFER_GREEN_SIZE: Int = 0x8D51
const val GL_RENDERBUFFER_BLUE_SIZE: Int = 0x8D52
const val GL_RENDERBUFFER_ALPHA_SIZE: Int = 0x8D53
const val GL_RENDERBUFFER_DEPTH_SIZE: Int = 0x8D54
const val GL_RENDERBUFFER_STENCIL_SIZE: Int = 0x8D55
const val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int = 0x8CD0
const val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int = 0x8CD1
const val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int = 0x8CD2
const val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int = 0x8CD3
const val GL_COLOR_ATTACHMENT0: Int = 0x8CE0
const val GL_DEPTH_ATTACHMENT: Int = 0x8D00
const val GL_STENCIL_ATTACHMENT: Int = 0x8D20
const val GL_NONE: Int = 0x0000
const val GL_FRAMEBUFFER_COMPLETE: Int = 0x8CD5
const val GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int = 0x8CD6
const val GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int = 0x8CD7
const val GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int = 0x8CD9
const val GL_FRAMEBUFFER_UNSUPPORTED: Int = 0x8CDD
const val GL_FRAMEBUFFER_BINDING: Int = 0x8CA6
const val GL_RENDERBUFFER_BINDING: Int = 0x8CA7
const val GL_MAX_RENDERBUFFER_SIZE: Int = 0x84E8
const val GL_INVALID_FRAMEBUFFER_OPERATION: Int = 0x0506

expect class KmlGl {
    fun activeTexture(texture: Int): Unit
    fun attachShader(program: Int, shader: Int): Unit
    fun bindAttribLocation(program: Int, index: Int, name: String): Unit
    fun bindBuffer(target: Int, buffer: Int): Unit
    fun bindFramebuffer(target: Int, framebuffer: Int): Unit
    fun bindRenderbuffer(target: Int, renderbuffer: Int): Unit
    fun bindTexture(target: Int, texture: Int): Unit
    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit
    fun blendEquation(mode: Int): Unit
    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit
    fun blendFunc(sfactor: Int, dfactor: Int): Unit
    fun blendFuncSeparate(sfactorRGB: Int, dfactorRGB: Int, sfactorAlpha: Int, dfactorAlpha: Int): Unit
    fun bufferData(target: Int, size: Long, data: KmlBuffer?, usage: Int): Unit
    fun bufferSubData(target: Int, offset: Long, size: Long, data: KmlBuffer?): Unit
    fun checkFramebufferStatus(target: Int): Int
    fun clear(mask: Int): Unit
    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit
    fun clearDepthf(d: Float): Unit
    fun clearStencil(s: Int): Unit
    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit
    fun compileShader(shader: Int): Unit
    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, imageSize: Int, data: KmlBuffer?): Unit
    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, imageSize: Int, data: KmlBuffer?): Unit
    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit
    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit
    fun createProgram(): Int
    fun createShader(type: Int): Int
    fun cullFace(mode: Int): Unit
    fun deleteBuffers(n: Int, buffers: KmlBuffer?): Unit
    fun deleteFramebuffers(n: Int, framebuffers: KmlBuffer?): Unit
    fun deleteProgram(program: Int): Unit
    fun deleteRenderbuffers(n: Int, renderbuffers: KmlBuffer?): Unit
    fun deleteShader(shader: Int): Unit
    fun deleteTextures(n: Int, textures: KmlBuffer?): Unit
    fun depthFunc(func: Int): Unit
    fun depthMask(flag: Boolean): Unit
    fun depthRangef(n: Float, f: Float): Unit
    fun detachShader(program: Int, shader: Int): Unit
    fun disable(cap: Int): Unit
    fun disableVertexAttribArray(index: Int): Unit
    fun drawArrays(mode: Int, first: Int, count: Int): Unit
    fun drawElements(mode: Int, count: Int, type: Int, indices: KmlBuffer?): Unit
    fun enable(cap: Int): Unit
    fun enableVertexAttribArray(index: Int): Unit
    fun finish(): Unit
    fun flush(): Unit
    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: Int): Unit
    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: Int, level: Int): Unit
    fun frontFace(mode: Int): Unit
    fun genBuffers(n: Int, buffers: KmlBuffer?): Unit
    fun generateMipmap(target: Int): Unit
    fun genFramebuffers(n: Int, framebuffers: KmlBuffer?): Unit
    fun genRenderbuffers(n: Int, renderbuffers: KmlBuffer?): Unit
    fun genTextures(n: Int, textures: KmlBuffer?): Unit
    fun getActiveAttrib(program: Int, index: Int, bufSize: Int, length: KmlBuffer?, size: KmlBuffer?, type: KmlBuffer?, name: KmlBuffer?): Unit
    fun getActiveUniform(program: Int, index: Int, bufSize: Int, length: KmlBuffer?, size: KmlBuffer?, type: KmlBuffer?, name: KmlBuffer?): Unit
    fun getAttachedShaders(program: Int, maxCount: Int, count: KmlBuffer?, shaders: KmlBuffer?): Unit
    fun getAttribLocation(program: Int, name: String): Int
    fun getBooleanv(pname: Int, data: KmlBuffer?): Unit
    fun getBufferParameteriv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun getError(): Int
    fun getFloatv(pname: Int, data: KmlBuffer?): Unit
    fun getFramebufferAttachmentParameteriv(target: Int, attachment: Int, pname: Int, params: KmlBuffer?): Unit
    fun getIntegerv(pname: Int, data: KmlBuffer?): Unit
    fun getProgramiv(program: Int, pname: Int, params: KmlBuffer?): Unit
    fun getProgramInfoLog(program: Int, bufSize: Int, length: KmlBuffer?, infoLog: KmlBuffer?): Unit
    fun getRenderbufferParameteriv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun getShaderiv(shader: Int, pname: Int, params: KmlBuffer?): Unit
    fun getShaderInfoLog(shader: Int, bufSize: Int, length: KmlBuffer?, infoLog: KmlBuffer?): Unit
    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int, range: KmlBuffer?, precision: KmlBuffer?): Unit
    fun getShaderSource(shader: Int, bufSize: Int, length: KmlBuffer?, source: KmlBuffer?): Unit
    fun getString(name: Int): String
    fun getTexParameterfv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun getTexParameteriv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun getUniformfv(program: Int, location: Int, params: KmlBuffer?): Unit
    fun getUniformiv(program: Int, location: Int, params: KmlBuffer?): Unit
    fun getUniformLocation(program: Int, name: String): Int
    fun getVertexAttribfv(index: Int, pname: Int, params: KmlBuffer?): Unit
    fun getVertexAttribiv(index: Int, pname: Int, params: KmlBuffer?): Unit
    fun getVertexAttribPointerv(index: Int, pname: Int, pointer: KmlBuffer?): Unit
    fun hint(target: Int, mode: Int): Unit
    fun isBuffer(buffer: Int): Boolean
    fun isEnabled(cap: Int): Boolean
    fun isFramebuffer(framebuffer: Int): Boolean
    fun isProgram(program: Int): Boolean
    fun isRenderbuffer(renderbuffer: Int): Boolean
    fun isShader(shader: Int): Boolean
    fun isTexture(texture: Int): Boolean
    fun lineWidth(width: Float): Unit
    fun linkProgram(program: Int): Unit
    fun pixelStorei(pname: Int, param: Int): Unit
    fun polygonOffset(factor: Float, units: Float): Unit
    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: KmlBuffer?): Unit
    fun releaseShaderCompiler(): Unit
    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit
    fun sampleCoverage(value: Float, invert: Boolean): Unit
    fun scissor(x: Int, y: Int, width: Int, height: Int): Unit
    fun shaderBinary(count: Int, shaders: KmlBuffer?, binaryformat: Int, binary: KmlBuffer?, length: Int): Unit
    fun shaderSource(shader: Int, string: String): Unit
    fun stencilFunc(func: Int, ref: Int, mask: Int): Unit
    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit
    fun stencilMask(mask: Int): Unit
    fun stencilMaskSeparate(face: Int, mask: Int): Unit
    fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit
    fun stencilOpSeparate(face: Int, sfail: Int, dpfail: Int, dppass: Int): Unit
    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: KmlBuffer?): Unit
    fun texParameterf(target: Int, pname: Int, param: Float): Unit
    fun texParameterfv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun texParameteri(target: Int, pname: Int, param: Int): Unit
    fun texParameteriv(target: Int, pname: Int, params: KmlBuffer?): Unit
    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: KmlBuffer?): Unit
    fun uniform1f(location: Int, v0: Float): Unit
    fun uniform1fv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform1i(location: Int, v0: Int): Unit
    fun uniform1iv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform2f(location: Int, v0: Float, v1: Float): Unit
    fun uniform2fv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform2i(location: Int, v0: Int, v1: Int): Unit
    fun uniform2iv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform3f(location: Int, v0: Float, v1: Float, v2: Float): Unit
    fun uniform3fv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform3i(location: Int, v0: Int, v1: Int, v2: Int): Unit
    fun uniform3iv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform4f(location: Int, v0: Float, v1: Float, v2: Float, v3: Float): Unit
    fun uniform4fv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniform4i(location: Int, v0: Int, v1: Int, v2: Int, v3: Int): Unit
    fun uniform4iv(location: Int, count: Int, value: KmlBuffer?): Unit
    fun uniformMatrix2fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer?): Unit
    fun uniformMatrix3fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer?): Unit
    fun uniformMatrix4fv(location: Int, count: Int, transpose: Boolean, value: KmlBuffer?): Unit
    fun useProgram(program: Int): Unit
    fun validateProgram(program: Int): Unit
    fun vertexAttrib1f(index: Int, x: Float): Unit
    fun vertexAttrib1fv(index: Int, v: KmlBuffer?): Unit
    fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit
    fun vertexAttrib2fv(index: Int, v: KmlBuffer?): Unit
    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit
    fun vertexAttrib3fv(index: Int, v: KmlBuffer?): Unit
    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit
    fun vertexAttrib4fv(index: Int, v: KmlBuffer?): Unit
    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, pointer: Long): Unit
    fun viewport(x: Int, y: Int, width: Int, height: Int): Unit
}
